var http = require('http');
var url = require('url');
var fs = require('fs');

var winston = require('winston');
var connect = require('connect');
var connectRoute = require('connect-route');
var st = require('st');
var uglify = require('uglify-js');

var DocumentHandler = require('./lib/document_handler');

// Load the configuration and set some defaults
var confPath = process.env.CONF || './config.js'
var config = JSON.parse(fs.readFileSync(confPath, 'utf8'));
config.port = process.env.PORT || config.port || 7777;
config.host = process.env.HOST || config.host || 'localhost';

// Set up the logger
if (config.logging) {
  try {
    winston.remove(winston.transports.Console);
  } catch(er) { }
  var detail, type;
  for (var i = 0; i < config.logging.length; i++) {
    detail = config.logging[i];
    type = detail.type;
    delete detail.type;
    winston.add(winston.transports[type], detail);
  }
}

// build the store from the config on-demand - so that we don't load it
// for statics
if (!config.storage) {
  config.storage = { type: 'file' };
}
if (!config.storage.type) {
  config.storage.type = 'file';
}

var Store, preferredStore;

if (process.env.REDISTOGO_URL && config.storage.type === 'redis') {
  var redisClient = require('redis-url').connect(process.env.REDISTOGO_URL);
  Store = require('./lib/document_stores/redis');
  preferredStore = new Store(config.storage, redisClient);
}
else {
  Store = require('./lib/document_stores/' + config.storage.type);
  preferredStore = new Store(config.storage);
}

// Compress the static javascript assets
if (config.recompressStaticAssets) {
  var list = fs.readdirSync('./static');

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    if ((item.indexOf('.js') === item.length - 3) && (item.indexOf('.min.js') === -1)) {
      dest = item.substring(0, item.length - 3) + '.min' + item.substring(item.length - 3);

      var minified = uglify.minify('./static/' + item);
      fs.writeFileSync('./static/' + dest, minified.code, 'utf8');

      winston.info('compressed ' + item + ' into ' + dest);
    }
  }
}

// Send the static documents into the preferred store, skipping expirations
var path, data;
for (var name in config.documents) {
  path = config.documents[name];
  data = fs.readFileSync(path, 'utf8');
  winston.info('loading static document', { name: name, path: path });
  if (data) {
    preferredStore.set(name, data, function(cb) {
      winston.debug('loaded static document', { success: cb });
    }, true);
  }
  else {
    winston.warn('failed to load static document', { name: name, path: path });
  }
}

// Pick up a key generator
var pwOptions = config.keyGenerator || {};
pwOptions.type = pwOptions.type || 'random';
var gen = require('./lib/key_generators/' + pwOptions.type);
var keyGenerator = new gen(pwOptions);

// Configure the document handler
var documentHandler = new DocumentHandler({
  store: preferredStore,
  maxLength: config.maxLength,
  keyLength: config.keyLength,
  keyGenerator: keyGenerator
});


var staticServe = st({
  path: './static',
  url: '/',
  index: 'index.html',
  passthrough: true,
  cache: config.staticCache
});

var apiServe = connectRoute(function(router) {

  // get raw documents - support getting with extension
  router.get('/raw/:id', function(request, response, next) {
    var skipExpire = !!config.documents[request.params.id];
    var key = request.params.id.split('.')[0];
    return documentHandler.handleRawGet(key, response, skipExpire);
  });

  // add documents
  router.post('/documents', function(request, response, next) {
    return documentHandler.handlePost(request, response);
  });

  // get documents
  router.get('/documents/:id', function(request, response, next) {
    var skipExpire = !!config.documents[request.params.id];
    return documentHandler.handleGet(request.params.id, response, skipExpire);
  });

  // If the previous static-serving module didn't respond to the resource,
  // forward to next with index.html and the web client application will
  // request the doc based on the url.
  router.get('/:id', function(request, response, next) {
    // Redirect to index.html, also clearing the previous 'st' module 'sturl'
    // field generated by the first staticServe module. If sturl isn't cleared
    // out then this new request.url is not looked at again.
    request.url = '/index.html';
    request.sturl = null;
    next();
  });
});

var staticRemains = st({
  path: './static',
  url: '/',
  passthrough: false,
  cache: config.staticCache
});


var app = connect();
app.use(staticServe);
app.use(apiServe);
app.use(staticRemains);
app.listen(config.port, config.host);

winston.info('listening on ' + config.host + ':' + config.port);
